<!-- <!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">

    <script src="https://cdn.tailwindcss.com"></script>

    <link rel="stylesheet" href="/public/css/styles.css">
    <title>Drip Kustom</title>
</head>
<body> -->
    <%- include ('partials/header') -%>

    <main class="px-3 sm:px-10 lg:px-20 pb-10">
        <h1 class="font-semibold text-2xl md:text-3xl lg:text-4xl">CHECKOUT</h1>
        <section class="flex flex-col lg:flex-row gap-10 mt-4 lg:mt-8">
            <div class="lg:w-[70%]" id="checkout">
                <div class="text-white bg-gray-700 rounded-md shadow-md p-6">
                    <h2 class="text-sm lg:text-lg font-semibold mb-4">YOUR ORDER</h2>

                    <% if (cartItems.length > 0) { %>
                        <% cartItems.forEach(function(cartItem) { %>
                            <div class="mb-4 flex lg:flex justify-between">
                                <div class="flex flex-col-reverse lg:flex-row lg:items-center w-[40%] lg:w-[40%]">
                                    <div class="w-[70%]">                                       
                                        <img class="h-20 w-[70%] sm:h-28 sm:w-[70%] md:w-[60%] lg:h-[90%] lg:w-[60%] rounded-md" src="<%= cartItem.image %>" alt="">
                                        <button class="remove-btn  text-red-700 font-semibold py-1 px-2 underline" data-shoe-id="<%= cartItem._id %>" data-size="<%= cartItem.size %>">Remove</button>
                                    </div>                                  
                                    <h2 class="w-[30%] mb-2 lg:mb-0 lg:ml-[10%] font-semibold text-sm lg:text-lg"><%= cartItem.name %></h2>
                                </div>
                                <div class="lg:w-[40%] w-[40%] flex flex-col justify-between my-4 sm:my-4 md:my-5 lg:my-0 lg:flex-row lg:items-center lg:justify-between lg:text-center lg:mx-5">
                                    <span class="flex flex-row lg:flex-col gap-x-2">
                                        <p>size:</p>
                                        <p><%= cartItem.size %></p>
                                    </span>
                                    <span class="flex flex-row gap-x-2">
                                        <button class="decrease-btn" data-shoe-id="<%= cartItem._id %>">-</button>
                                        <span class="quantity flex flex-row mx-2 md:mx-3 lg:mx-5" id="quantity_<%= cartItem._id %>"><%= cartItem.quantity %></span>
                                        <button class="increase-btn" data-shoe-id="<%= cartItem._id %>">+</button>
                                    </span>
                                    <span class="price font-semibold text-sm lg:text-lg" id="price_<%= cartItem._id %>">$<%= cartItem.price * cartItem.quantity %></span> 
                                </div>
                            </div>
                        <% }); %>
                    <% } %>
                </div>
               
                
                <!-- <div class="mt-5">
                    <fieldset class="border border-gray-300 p-4 rounded-md">
                        <legend class="text-lg font-semibold">PERSONAL DATA</legend>
                        
                        <div class="my-4">
                            <label for="name" class="block text-gray-700 font-semibold mb-2">First Name:</label>
                            <input type="text" id="fname" name="fname" placeholder="John" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500">    
                        </div>
                      
                        <div class="my-4">
                            <label for="name" class="block text-gray-700 font-semibold mb-2">Last Name:</label>
                            <input type="text" id="lname" name="lname" placeholder="Doe" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500">    
                        </div>

                        <div class="my-4">
                            <label for="email" class="block text-gray-700 font-semibold mb-2">Email:</label>
                            <input type="email" id="checkoutEmail" name="email" placeholder="yourname@gmail.com" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500">    
                        </div>

                        <div class="my-4">
                            <label for="name" class="block text-gray-700 font-semibold mb-2">Phone Number:</label>
                            <input type="number" id="phoneNumber" name="phoneNumber" placeholder="+1 233 456 789" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500">    
                        </div>
                    </fieldset>                      
                </div>
                <div class="mt-5">
                    <fieldset class="border border-gray-300 p-4 rounded-md">
                        <legend class="text-lg font-semibold">DELIVERY DETAILS</legend>
                        
                        <div class="my-4">
                            <label for="Address" class="block text-gray-700 font-semibold mb-2">Address</label>
                            <input type="text" id="Address" name="Address" placeholder="Address" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500">    
                        </div>
                      
                        <div class="my-4 lg:flex justify-between">
                            <div class="lg:w-[48%]">
                                <label for="country" class="block text-sm font-medium text-gray-700 mb-1">Choose a Country:</label>
                                <select id="country" name="country" class="block w-full py-2 px-3 border border-gray-300 bg-white rounded-md shadow-sm focus:outline-none focus:ring focus:border-blue-500">
                                    <option value="usa">United States</option>
                                    <option value="canada">Canada</option>
                                    <option value="uk">United Kingdom</option>
                                    <option value="nigeria">Nigeria</option>
                                </select>
                            </div>
                            <div class="lg:w-[48%] mt-2 lg:mt-0">
                                <label for="name" class="block text-gray-700 font-semibold">City:</label>
                                <input type="text" id="city" name="city" placeholder="City" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500">    
                            </div>
                        </div>
                        <div class="my-4 lg:flex justify-between">
                            <div class="lg:w-[48%]">
                                <label for="state" class="block text-gray-700 font-semibold">State:</label>
                                <input type="text" id="state" name="state" placeholder="State" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500"> 
                            </div>
                            <div class="lg:w-[48%] mt-2 lg:mt-0">
                                <label for="zip-code" class="block text-gray-700 font-semibold">Zip Code:</label>
                                <input type="text" id="zip-code" name="zip-code" placeholder="Zip Code" class="w-full border rounded-md px-3 py-2 focus:outline-none focus:border-blue-500">    
                            </div>
                        </div>
                    </fieldset>
                </div> -->
                <div id="addressContainer" class="rounded-md shadow-md">
                        <div class="shadow rounded-md mt-5">
                            <div class="bg-gray-700 text-white rounded-t-md">
                                <div class="flex justify-between font-semibold text-lg mx-10 py-4">
                                    <h3>Choose Your Address Information</h3>
                                    <a href="/profile/edit-address?returnTo=/checkout" class="flex items-center"><span>Add New Address</span></a>
                                </div>                 
                            </div>
                            <% address.forEach(function(address, index) { %>
                                <div class="flex flex-col mx-10 py-5 gap-y-4">
                                    <label class="address-item">
                                        <input type="radio" name="selected-address" value="<%= address.id %>" id="address<%= index %>">
                                        <span class="address-info">
                                            <span class="mr-2">Address:</span>
                                            <span id="addressContent<%= index %>"><%= address.streetAddress %>, <%= address.city %>, <%= address.state %>, <%= address.country %></span>
                                        </span>
                                    </label>
                                </div>
                                <script>
                                    var textElement = document.getElementById('addressContent<%= index %>');
                                    // Get the text content
                                    var textContent = textElement.textContent;

                                    // Check if the text exceeds 100 words
                                    if (textContent.length > 100) {
                                        // Trim the text to 100 words
                                        var trimmedText = textContent.substring(0, 100);
                                        // Add "..." at the end
                                        trimmedText += '...';
                                        // Update the text content
                                        textElement.textContent = trimmedText;
                                    }
                                </script>
                            <% }); %>
                        </div>
                        
                </div>
            </div>

            <div class="mt-5 lg:mt-0 lg:w-[30%] text-white">
                <div class=" bg-gray-700 rounded-md shadow-md p-6">
                    <h2 class="text-lg font-semibold mb-6">Cart Total</h2>
                  
                    <div class="mb-4" id="grandPrice">
                        <span class="flex justify-between">
                            <p>Sub Total</p>
                            <p>$ <%= totalPrice %></p>
                        </span>
                        <span class="flex justify-between">
                            <p>Shipping Cost</p>
                            <p>$ 50</p>
                        </span>
                        <span class="flex justify-between items-center border-t-2 border-gray-500 mt-2">
                            <p class="font-semibold text-lg">Grand Total</p>
                            <p class="font-semibold text-2xl lg:text-3xl">$ <%= totalPrice + 50 %> </p>
                        </span>
                    </div>
                </div>

                <div class=" bg-gray-700 rounded-md shadow-md p-6 mt-5">
                    <h2 class="text-lg font-semibold mb-6">Payment Methods</h2>
                  
                    <div class="mb-4">
                        <ul class="" id="">
                            <li>
                                <input type="radio" id="sortCheckbox1" name="sortCheckboxes" value="paystack">
                                <label for="sortCheckbox1">Paystack</label>                    
                            </li>
                            <li>
                                <input type="radio" id="sortCheckbox2" name="sortCheckboxes" value="stripe">
                                <label for="sortCheckbox3">Stripe</label>
                            </li>
                            <li>
                                <input type="radio" id="sortCheckbox3" name="sortCheckboxes" value="flutterwave">
                                <label for="sortCheckbox3">Flutterwave</label>
                            </li>
                        </ul>
                    </div>

                    <!-- <a href="" class=" font-semibold text-lg flex justify-center bg-green-500 hover:bg-green-600 rounded-md md:rounded-lg"> -->
                        <button id="confirmOrderBtn" class="w-full py-2 font-semibold text-lg flex justify-center bg-green-500 hover:bg-green-600 rounded-md md:rounded-lg">Confirm Order</button>                       
                    <!-- </a> -->
                    
                </div>

            </div>
        </section>
    </main>
    <%- include ('partials/footer') -%>
    <script src="https://js.stripe.com/v3/"></script>
    <script src="https://js.paystack.co/v1/inline.js"></script>
    <script src="https://checkout.flutterwave.com/v3.js"></script>
    <script>
        const button = document.getElementById("button")
        var stripe = Stripe('pk_test_51OdizXKiIBXF9r7LB9S3bhE2RkBiDaGKKFwFi80YItKTV0I6qMlTHttzH9THfOWX2uBoq7G8qMLdMZT3o13sS6dV001fmJ3XRS');
      
        function getCartItemsFromCookies() {
        // Retrieve the cookie value
            const cartCookie = document.cookie.split(';').find(cookie => cookie.trim().startsWith('cart='));

        // Parse the cookie value to get the cart items
        if (cartCookie) {
            const cartItemsString = decodeURIComponent(cartCookie.split('=')[1]);
            // console.log('Cart items string:', cartItemsString);
            try {
            const cartItems = JSON.parse(cartItemsString);
            const cartItemsArray = Object.values(cartItems);
            // console.log(cartItemsArray);
            const formattedCartItems = cartItemsArray.map(item => {
                const { name, price, size, quantity } = item;
                // console.log('quantity 1:', item.quantity);
                return { name, price, size, quantity };
            });
            return formattedCartItems;

            // return cartItems;
            } catch (error) {
            console.error('Error parsing cart items from cookie:', error);
            }
        }
        // Return an empty array if the cart cookie is not found or cannot be parsed
        return [];
        }
        const cartItems = getCartItemsFromCookies();
        // console.log(cartItems);
        function calculateTotalAmount(cartItems) {
            let totalAmount = 0;
            cartItems.forEach(item => {
                totalAmount += item.price * item.quantity;
                // console.log('price:', item.price);
                // console.log('quantity2:', item.quantity);
                // console.log(totalAmount);
            });

            return totalAmount;
        }

        const totalAmount = calculateTotalAmount(cartItems);
        // console.log(totalAmount);

        document.getElementById('confirmOrderBtn').addEventListener('click', async function(event) {

            //GETTING THE LOCATION AND EXCHANGE RATE
            async function exampleUsage() {
                const userCurrency = await getUserLocation(); 
                // console.log('userCurrency in example:', userCurrency);
                const priceInUSD = totalAmount;
                console.log('user total in example:', priceInUSD);
                try {
                    const convertedPrice = await convertPriceToUserCurrency(userCurrency, priceInUSD);
                    return convertedPrice;
                    // console.log(`Price in user's currency (${userCurrency}): ${convertedPrice}`);
                } catch (error) {
                    console.error('Error converting price:', error);
                }
            }

            exampleUsage();

            async function fetchExchangeRate(userCurrency) {
                const response = await fetch(`https://api.exchangerate-api.com/v4/latest/USD`);
                // https://v6.exchangerate-api.com/v6/e02631707d2cdd4e485ec376/latest/USD the api with my api key 1500 limit free
                const data = await response.json();
                console.log('data:', data);
                // const priceInUSD = 10;

                // const userCurrency = await getUserLocation(); 
                return data.rates[userCurrency];
            }

            
            // Function to convert price from USD to the user's currency
            async function convertPriceToUserCurrency(userCurrency, priceInUSD) {
                const exchangeRate = await fetchExchangeRate(userCurrency);
                console.log('exchangeRate:', exchangeRate);

                const convertedPrice = priceInUSD * exchangeRate;
                return convertedPrice;
            }


            async function getUserLocation() {
                try {
                    // Fetch the user's IP address
                    const response = await fetch('https://api.ipify.org?format=json');
                    const data = await response.json();
                    console.log('data from getLocation:', data);
                    const ipAddress = data.ip;
                    console.log('ipAddress:', ipAddress);

                    // Use the IP address to fetch the user's location
                    const locationResponse = await fetch(`https://ipapi.co/${ipAddress}/json/`);
                    const locationData = await locationResponse.json();
                    // console.log('locationData:', locationData);

                    const country = locationData.country_name;
                    const countryCurrency = locationData.currency;
                    // console.log('country:', country);
                    console.log('countryCurrency:', countryCurrency);

                    return countryCurrency;
                } catch (error) {
                    console.error('Error getting user location:', error);
                    return null; // Return null if an error occurs
                }
            }


            event.preventDefault();
            const userEmail = '<%= userEmail %>' //!!!use this for the email in paystack and stripe as email!!!!
            // console.log(userEmail);

            // Check if any address is selected
            var selectedAddress = document.querySelector('input[name="selected-address"]:checked');
            if (!selectedAddress) {
                alert('Please select a delivery address.');
                return; // Prevent further execution
            }
            // Check if any payment method is selected
            var selectedPaymentMethod = document.querySelector('input[name="sortCheckboxes"]:checked');
            if (!selectedPaymentMethod) {
                alert('Please select a payment method.');
                return; // Prevent further execution
            }

            selectedAddress = selectedAddress.value;
            selectedPaymentMethod = selectedPaymentMethod.value;

            if(selectedPaymentMethod === 'stripe') {
                // alert('striped')
                const cartItems = getCartItemsFromCookies();
                // console.log(cartItems);

                fetch("/create-checkout-session", {
                    method: "POST",
                    headers: {
                    "Content-Type": "application/json",
                    },
                    body: JSON.stringify({
                    items: cartItems,
                    }),
                })
                    .then(res => {
                    if (res.ok) return res.json()
                    return res.json().then(json => Promise.reject(json)), clearCartCookies();
                    })
                    .then(({ url }) => {
                    window.location = url
                    clearCartCookies(); //clear the cart cookies after successful payment
                    })
                    .catch(e => {
                    console.error(e.error)
                    })
            } 

            if(selectedPaymentMethod === 'paystack') {
                try {
                    const userEmail = 'oonojapeter@gmail.com'; //this should be removed on production and user email through ejs should be used
                    // console.log(cartItems);
                    let handler = PaystackPop.setup({
                        key: 'pk_test_2dd31b309b9af1abb060c66bb52c2c4b8525ee6b', // Paystack public key
                        email: userEmail, //!!!use the userEmail passed through ejs for this mail!!!!
                        amount: totalAmount * 100, //use the conversion here
                        // ref: ''+Math.floor((Math.random() * 1000000000) + 1), // generates a pseudo-unique reference. Please replace with a reference you generated. Or remove the line entirely so our API will generate one for you
                        onClose: function(){
                        // alert('Window closed.');
                        },
                        callback: function(response){
                                    if (response.status === 'success') {                               
                                        sendPaymentDetails(response.reference, userEmail, totalAmount, selectedAddress, selectedPaymentMethod, cartItems);
                                        clearCartCookies();
                                    } else {
                                        alert('Payment failed. Please try again.');
                                    }
                        }
                    });

                    handler.openIframe();
        
                } catch (error) {
                    console.error('Error processing payment:', error);
                }


            }

            if(selectedPaymentMethod === 'flutterwave') {
                try{
                    const countryCurrency = await getUserLocation(); 
                    const priceInUserCurrency = await exampleUsage();
                    console.log('country currency:', countryCurrency);
                    console.log('price In User Currency:', priceInUserCurrency);

                    var paymentData = {
                        public_key: 'FLWPUBK_TEST-c4b26304294d14b83b0658d6868cff7b-X',
                        tx_ref: Date.now().toString() + Math.floor(Math.random() * 1000).toString(),
                        amount: priceInUserCurrency,
                        currency: countryCurrency,
                        redirect_url: '/',
                        payment_options: 'card, banktransfer, ussd', 
                        customer: {
                        email: userEmail,
                        phone_number: '+1234567890',
                        name: 'John Doe'
                        },
                        callback: function(response) {
                            // console.log(response);
                            if (response.status === 'completed') {                             
                                sendPaymentDetails(response.tx_ref, userEmail, totalAmount, selectedAddress, selectedPaymentMethod, cartItems);
                                clearCartCookies();
                            } else {
                                alert('Payment failed. Please try again.');
                            }
                        },
                        onclose: function() {
                        console.log('Payment window closed');
                        }
                    };
                
                    FlutterwaveCheckout(paymentData);

                } catch (error) {
                    console.error('Error processing payment:', error);
                }
            }
            
        });

        async function sendPaymentDetails(reference, userEmail, totalAmount, selectedAddress, selectedPaymentMethod, cartItems) {
            try {
                const paymentDetails = { reference, userEmail, totalAmount, selectedAddress, selectedPaymentMethod, cartItems };
                console.log('inside sendPaymentDetails:', paymentDetails);
                const response = await fetch('/payment-success', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(paymentDetails)
                });
                
                if (response.ok) {
                    const responseData = await response.json();
                    const savedOrder = responseData.savedOrder;
                    // console.log('Saved order:', savedOrder);
                    // console.log('Saved orderId:', savedOrder._id);
                    window.location.href = '/thank-you?orderId=' + savedOrder._id;
                } else {
                    console.error('Failed to send payment details to server.');
                }
            } catch (error) {
                console.error('Error sending payment details to server:', error);
            }
        }

        
        // button.addEventListener("click", () => {
        //     const cartItems = getCartItemsFromCookies();
        //     console.log(cartItems);

        //     fetch("/create-checkout-session", {
        //         method: "POST",
        //         headers: {
        //         "Content-Type": "application/json",
        //         },
        //         body: JSON.stringify({
        //         items: cartItems,
        //         }),
        //     })
        //         .then(res => {
        //         if (res.ok) return res.json()
        //         return res.json().then(json => Promise.reject(json)), clearCartCookies();
        //         })
        //         .then(({ url }) => {
        //         window.location = url
        //         clearCartCookies(); //clear the cart cookies after successful payment
        //         })
        //         .catch(e => {
        //         console.error(e.error)
        //         })
        // })
        
        // const paymentForm = document.getElementById('paystackForm');
        // paystackForm.addEventListener("click", payWithPaystack, false);

        // function payWithPaystack(e) {
        // e.preventDefault();

        // let handler = PaystackPop.setup({
        //     key: 'pk_test_2dd31b309b9af1abb060c66bb52c2c4b8525ee6b', // Replace with your public key
        //     email: 'oonojapeter@gmail.com', //document.getElementById("email-address").value,
        //     amount: totalAmount * 100, //document.getElementById("amount").value * 100,
        //     ref: ''+Math.floor((Math.random() * 1000000000) + 1), // generates a pseudo-unique reference. Please replace with a reference you generated. Or remove the line entirely so our API will generate one for you
        //     // label: "Optional string that replaces customer email"
        //     onClose: function(){
        //     alert('Window closed.');
        //     },
        //     // callback: function(response){
        //     //   let message = 'Payment complete! Reference: ' + response.reference;
        //     //   alert(message);
        //     // }
        //     callback: function(response){
        //                 if (response.status === 'success') {
        //                     // alert('success');
        //                     // Redirect to the Thank You page
        //                     window.location.href = '/thank-you';
        //                     clearCartCookies();
        //                 } else {
        //                     alert('Payment failed. Please try again.');
        //                 }
        //     }
        // });

        // handler.openIframe();
        // }

        function clearCartCookies() {
            document.cookie = 'cart=; expires=Thu, 01 Jan 1970 00:00:00 UTC; path=/;';
        }

        document.getElementById('checkout').addEventListener('click', function(event) {
                const target = event.target;
                // console.log(target);

                // Check if the clicked element is an increase or decrease button
                if (target.classList.contains('increase-btn')) {
                    const shoeId = target.dataset.shoeId;
                    const spanQuantity = document.getElementById(`quantity_${shoeId}`);
                    const currentQuantity = parseInt(spanQuantity.textContent);

                    // Increase quantity
                    spanQuantity.textContent = currentQuantity + 1;
                    updateQuantity(shoeId, currentQuantity + 1);
                } else if (target.classList.contains('decrease-btn')) {
                    const shoeId = target.dataset.shoeId;
                    const spanQuantity = document.getElementById(`quantity_${shoeId}`);
                    const currentQuantity = parseInt(spanQuantity.textContent);

                    // Decrease quantity only if it's greater than 1
                    if (currentQuantity > 1) {
                        spanQuantity.textContent = currentQuantity - 1;

                        updateQuantity(shoeId, currentQuantity - 1);
                    }
                } 
        });
    </script>
</body>
</html>